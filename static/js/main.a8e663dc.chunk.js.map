{"version":3,"sources":["components/InputPanel.js","components/OutputPanel.js","App.js","index.js"],"names":["InputPanel","inputStrings","inputChangeFunction","addInputFunction","removeInputFunction","checkButtonFunction","minimumInputs","className","map","s","i","onChange","type","onClick","length","OutputPanel","englishWords","stringInputs","checkClicked","currentIndex","subtractFromCurrentIndexFunction","addToCurrentIndexFunction","changeSearchFunction","searchFunction","nf","x","toString","replace","some","id","App","english_words","require","getPossibleWords","dials","current","build","letter","word","indexOf","push","useState","Array","from","inputs","setInputs","searchContents","setSearchContents","setCheckClicked","words","setWords","setCurrentIndex","event","parseInt","target","split","slice","concat","value","toLowerCase","isNaN","indexOfSearch","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a8e663dc.chunk.js","sourcesContent":["import \"./InputPanel.css\";\r\n\r\nfunction InputPanel({\r\n  inputStrings,\r\n  inputChangeFunction,\r\n  addInputFunction,\r\n  removeInputFunction,\r\n  checkButtonFunction,\r\n  minimumInputs,\r\n}) {\r\n  return (\r\n    <div className=\"inputs\">\r\n      {inputStrings.map((s, i) => (\r\n        <input\r\n          className={\"dialInput \" + i}\r\n          key={i}\r\n          onChange={inputChangeFunction}\r\n          type=\"text\"\r\n        />\r\n      ))}\r\n\r\n      <hr />\r\n\r\n      <button className=\"inputButton\" onClick={addInputFunction}>\r\n        Add Dial\r\n      </button>\r\n      <button className=\"inputButton\" onClick={removeInputFunction}>\r\n        {inputStrings.length === minimumInputs ? (\r\n          <strike>Remove Dial</strike>\r\n        ) : (\r\n          \"Remove Dial\"\r\n        )}\r\n      </button>\r\n      <button className=\"inputButton\" onClick={checkButtonFunction}>\r\n        Check\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputPanel;\r\n","import \"./OutputPanel.css\";\r\n\r\nfunction OutputPanel({\r\n  englishWords,\r\n  stringInputs,\r\n  checkClicked,\r\n  currentIndex,\r\n  subtractFromCurrentIndexFunction,\r\n  addToCurrentIndexFunction,\r\n  changeSearchFunction,\r\n  searchFunction,\r\n}) {\r\n  function nf(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"outputs\">\r\n      {englishWords.length === 0 ? (\r\n        <h1>\r\n          {!stringInputs.some((s) => s === \"\")\r\n            ? checkClicked\r\n              ? \"No Results\"\r\n              : \"Click Check\"\r\n            : \"Fill Out Dials\"}\r\n        </h1>\r\n      ) : (\r\n        <div>\r\n          <p>\r\n            {nf(currentIndex + 1)} of {nf(englishWords.length)}\r\n          </p>\r\n          <h1>{englishWords[currentIndex]}</h1>\r\n          <div className=\"navContainer\">\r\n            <button\r\n              onClick={subtractFromCurrentIndexFunction}\r\n              className=\"navButton leftButton\"\r\n            >\r\n              {\"<\"}\r\n            </button>\r\n            <button\r\n              onClick={addToCurrentIndexFunction}\r\n              className=\"navButton rightButton\"\r\n            >\r\n              {\">\"}\r\n            </button>\r\n          </div>\r\n          <hr />\r\n          <div className=\"searchContainer\">\r\n            <input\r\n              onChange={changeSearchFunction}\r\n              type=\"text\"\r\n              className=\"searchInput\"\r\n              id=\"searchInput\"\r\n            />\r\n            <button onClick={searchFunction} className=\"searchButton\">\r\n              Search\r\n            </button>\r\n          </div>\r\n          <p className=\"searchHelp\">Search word or position</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OutputPanel;\r\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport InputPanel from \"./components/InputPanel\";\nimport OutputPanel from \"./components/OutputPanel\";\n\nfunction App() {\n  const MIN_INPUTS = 2;\n\n  const english_words = require(\"an-array-of-english-words\");\n\n  function getPossibleWords(dials, current = \"\") {\n    if (dials.length === 0) {\n      return [];\n    } else if (dials.length - 1 === current.length) {\n      let build = [];\n      for (let letter of dials[dials.length - 1]) {\n        const word = current + letter;\n        if (english_words.indexOf(word) !== -1) {\n          build.push(word);\n        }\n      }\n      return build;\n    } else {\n      let build = [];\n      for (let letter of dials[current.length]) {\n        for (let word of getPossibleWords(dials, current + letter)) {\n          build.push(word);\n        }\n      }\n      return build;\n    }\n  }\n\n  const [inputs, setInputs] = useState(Array.from(Array(4)).map(() => \"\"));\n  const [searchContents, setSearchContents] = useState(\"\");\n  const [checkClicked, setCheckClicked] = useState(false);\n  const [words, setWords] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  function addInput() {\n    setWords([]);\n    setInputs(inputs.concat(\"\"));\n  }\n\n  function removeInput() {\n    setWords([]);\n    if (inputs.length > MIN_INPUTS) {\n      setInputs(inputs.slice(0, inputs.length - 1));\n    }\n  }\n\n  function handleInputChange(event) {\n    setCheckClicked(false);\n    setWords([]);\n    const i = parseInt(event.target.className.split(\" \")[1]);\n    setInputs(\n      inputs\n        .slice(0, i)\n        .concat([event.target.value])\n        .concat(inputs.slice(i + 1, inputs.length))\n    );\n  }\n\n  function handleChangeSearch(event) {\n    if (isNaN(parseInt(event.target.value))) {\n      setSearchContents(event.target.value);\n    } else {\n      setSearchContents(parseInt(event.target.value));\n    }\n  }\n\n  function check() {\n    if (words.length === 0) {\n      setCheckClicked(true);\n      setWords(getPossibleWords(inputs.map((s) => s.toLowerCase())));\n    }\n  }\n\n  function search() {\n    if (!!searchContents) {\n      if (isNaN(searchContents)) {\n        const indexOfSearch = words.indexOf(searchContents.toLowerCase());\n        if (indexOfSearch === -1) {\n          document.getElementById(\"searchInput\").value = \"Couldn't find that\";\n        } else {\n          setCurrentIndex(indexOfSearch);\n        }\n      } else {\n        setCurrentIndex(\n          (((searchContents - 1) % words.length) + words.length) % words.length\n        );\n      }\n    }\n  }\n\n  function subtractFromCurrentIndex() {\n    setCurrentIndex(\n      (((currentIndex - 1) % words.length) + words.length) % words.length\n    );\n  }\n\n  function addToCurrentIndex() {\n    setCurrentIndex((currentIndex + 1) % words.length);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <InputPanel\n          inputStrings={inputs}\n          inputChangeFunction={handleInputChange}\n          addInputFunction={addInput}\n          removeInputFunction={removeInput}\n          checkButtonFunction={check}\n          minimumInputs={MIN_INPUTS}\n        />\n\n        <OutputPanel\n          englishWords={words}\n          stringInputs={inputs}\n          checkClicked={checkClicked}\n          currentIndex={currentIndex}\n          subtractFromCurrentIndexFunction={subtractFromCurrentIndex}\n          addToCurrentIndexFunction={addToCurrentIndex}\n          changeSearchFunction={handleChangeSearch}\n          searchFunction={search}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}